XML (extensible markup Language)
--------------------------------------------------
1)It is used to store and transport data.
2)XML is designed to self-descriptive.
3)TThe tags are not predefined .we have to define our own tags.
4)It is platform and language independent.
-------------------------
example-1
<?xml version="1.0" encoding="ISO-8859-1"?>
<note>
<to>Ranjit</to>
<from>Sandip</from>
<heading>Welcome to XML</heading>
<body>Don't forget call me this weekend</body>
</note>
--------------------------------------------------------------------------
DTD (Document type definition)
It is an standard which is used to define the legal elements in an XML document.
--------------------------------------------------------------
XSD(XML schema defination)
It is an XML based DTD used to describe the structure of the XML document.
-------------------------------------------------------------------
Valid and well-formed XML document with DTD
Let's take an example of well-formed and valid XML document. It follows all the rules of DTD.

employee.xml
---------------------------------------------------
<?xml version="1.0"?>  
<!DOCTYPE employee SYSTEM "employee.dtd">  
<employee>  
  <firstname>sandip</firstname>  
  <lastname>Mohapatra</lastname>  
  <email>sandip@gmail.com</email>  
</employee>   
In the above example, the DOCTYPE declaration refers to an external DTD file. The content of the file is shown in below paragraph.
------------------------------------------------------------------------------------------------------------------------------------------
employee.dtd
------------------------
<!ELEMENT employee (firstname,lastname,email)>  
<!ELEMENT firstname (#PCDATA)>  
<!ELEMENT lastname (#PCDATA)>  
<!ELEMENT email (#PCDATA)>  

------------------------------------------------------------------------------------------------
<!DOCTYPE employee :- It definesd that the root element of the document is employee.
<!ELEMENT employee :- It defines emeployee contains 3 elements firstname,lastname,email
<!ELEMENT firstname (#PCDATA)>  :- It defines that the firstname element is #PCDATA (parseable data type)
---------------------------------------------------------------------------------------------------------
XML Schema
---------------------------
XML schema is a language which is used to express contraint about XML document.
XML document is called as well-formed when it contain   validation against schema.
--------------------------------------------------------------------------------------------------------------
employee.xsd
--------------------------
<?xml version="1.0"?>  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"  
targetNamespace="http://www.mphasis.com"  
xmlns="http://www.mphasis.com"  
elementFormDefault="qualified">  
  
<xs:element name="employee">  
  <xs:complexType>  
    <xs:sequence>  
      <xs:element name="firstname" type="xs:string"/>  
      <xs:element name="lastname" type="xs:string"/>  
      <xs:element name="email" type="xs:string"/>  
    </xs:sequence>  
  </xs:complexType>  
</xs:element>  
  
</xs:schema>  
----------------------------------------------------
employee.xml
--------------------------------
<?xml version="1.0"?>  
<employee  
xmlns="http://www.mphasis.com"  
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
xsi:schemaLocation="http://www.mphasis.com employee.xsd">  
  
  <firstname>sandip</firstname>  
  <lastname>Mohapatra</lastname>  
  <email>sandip@gmail.com</email>  
</employee>  
------------------------------------------------------------------------

1)<xs:element name="employee">  :- This defines the root element name as employee.
2)<xs:complexType> :-It will define that the element employee  is complex type having sub-braches.
3)<xs:sequence>  :-It defines that the complex type is having a sequence of elements.
4)<xs:element name="firstname" type="xs:string"/>  :- it defines that the element firstname is of string type .

There  are two types of datatypes in XML schema.
1)simple type:- It contains less attributes and child elements. 
2)complex type:- It contains multiple attributes and many sub elements.
-----------------------------------------------------------------------------------------------------------

 