ts-typescript
----------------------------
app
-app.component.ts
-app.component.css
-app.component.html
-app.module.ts:- has list of files which are created

index.html:-starting point
-------------------------------------------------------------------------------
execution flow
----------------------
1)index.html:- we have the selector.<app-root></app-root>
2)app.moduule.ts---[bootstrap].it contains the file which need to run.
-----------------------------
-------------------------------------------------------------------------------------------------------
to create a new module
-----------------------------
terminal
step 1:-C:\Users\sandip\Desktop\Batch229\src\app>ng g c login 
---------------------------------------------------------
step 2:-index.html
 <app-login>This is Mphasis Batch229</app-login>
--------------------------------------------------------------------
step 3:-app.module.ts
bootstrap: [LoginComponent]
---------------------------------------------------------------------------
step 4:-change in login.component.html
step 5:-change in login.component.css
-------------------------------------------------------------
terminal
step 6:- ng serve
step 7:- localhost:4200
--------------------------------------------------------
<h1>Employee Registration Page</h1><hr>
<form>
<table>
<tr><td>Enter your name</td><td><input type=text name=t1 size=20></td></tr>
<tr><td>Enter your email</td><td><input type=text name=t2 size=20></td></tr>
<tr><td>Enter your address</td><td><input type=text name=t3 size=20></td></tr>
<tr><td>Enter your phoneno</td><td><input type=text name=t4 size=20></td></tr>
<tr><td>Enter your nationality</td><td><input type=text name=t5 size=20></td></tr>
<tr><td></td><td><input type=submit value="submit"></td></tr>
</table>
</form>
--------------------------------------------------------------------------------
example-1
------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent 
{
public product=
{
Name:'SamsungTV',
Price:45000.00,
MFD:'1-july-2021'
} 
  }
-----------------------------------------------------
<dl>
<dt>Name</dt>
<dd>{{product.Name}}</dd>
<dt>Price</dt>
<dd>{{product.Price}}</dd>
<dt>Manufacturing Date</dt>
<dd>{{product.MFD}}</dd>
</dl>
-----------------------------------------------------------
wap to display your details name,email,phoneno,address and display it.
---------------------------------------------------------------------
example-1
-----------------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'Ranjit',
  template: `<h1>Employee Registration Page</h1><hr>
  <form>
  <table>
  <tr><td>Enter your name</td><td><input type=text name=t1 size=20></td></tr>
  <tr><td>Enter your email</td><td><input type=text name=t2 size=20></td></tr>
  <tr><td>Enter your address</td><td><input type=text name=t3 size=20></td></tr>
  <tr><td>Enter your phoneno</td><td><input type=text name=t4 size=20></td></tr>
  <tr><td>Enter your nationality</td><td><input type=text name=t5 size=20></td></tr>
  <tr><td></td><td><input type=submit value="submit"></td></tr>
  </table>
  </form>`
 })
export class MyDetailsComponent {
}
-----------------------------------------------------------------------------------------------------
example-2
-----------------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'Ranjit',
  template: `
  <p>My name is {{name}}</p>
  <p>My email is {{email}}</p>
  <p>My address is {{address.street}} {{address.loc}} 
  {{address.state}} {{address.city}}</p>
  <p><Button (click)="ShowDetails()">Show my Details..</Button></p>
  <h3>My Hobbies are </h3>{{hobbies}}
  <h3>My daily Foods are </h3>
  <ul>
  <li *ngFor="let food of foods">
  {{food}}
  </li>
  </ul>
  `
 })
export class MyDetailsComponent 
{
  name:String;
  email:String;
  address:any;
  hobbies:string[];
  foods:string[];
constructor()
{
  this.name='sandip';
  this.email='sandip@gmail.com';
  this.address=
  {
    street:'MG Road',
    loc:'Sivaji Nagar',
    city:'Bangalore',
    state:'Karnataka'
  }
  this.hobbies=['music','dance','cricket','football','movies'];
  this.foods=['rice and Dal','Biryani','Noodles','ice-cream'];
}
ShowDetails()
{
  console.log("My name is",this.name);
  console.log("My email is",this.email);
  console.log("My address is",this.address);
alert("My name is :"+this.name);
}
}
--------------------------------------------------------------------------
Routing :-
It helps in directing users to different pages.Hence based on the options they choose ,the page will render and open.
example:- 
Home
about
contact
product
inventry
feedback
--------------------------------
example-1
-----------------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-rout-example',
  template:`MphasisAngular Batch229
  <ul>
  <li><a [routerLink]="['/Login']">Login</a></li>
  <li><a [routerLink]="['/Register']">Register</a></li>
  <li><a [routerLink]="['/MyDetails']">MyDetails</a></li>
    </ul><hr><hr>
    <router-outlet></router-outlet>
  `
})
export class RoutExampleComponent {
}
-----------------------------------------------------------------------------------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule,Routes } from '@angular/router';   <------------------------------------------
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './login/login.component';
import { RegisterComponent } from './register/register.component';
import { MyDetailsComponent } from './my-details/my-details.component';
import { RoutExampleComponent } from './rout-example/rout-example.component';

const appRoutes:Routes=[     <-------------------------------------------------------------
{path:'Login',component:LoginComponent},
{path:'Register',component:RegisterComponent},
{path:'MyDetails',component:MyDetailsComponent},
]

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    RegisterComponent,
    MyDetailsComponent,
    RoutExampleComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    RouterModule.forRoot(appRoutes)  <------------------
  ],
  providers: [],
  bootstrap: [RoutExampleComponent]
})
export class AppModule { }
------------------------------------------------------------------------------------------------------------------
example-3
-----------------
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
  <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
</head>
<body>
<div class="container">
  <h2>Student Registration Page</h2>
  <form role="form" action=second>
    <div class="form-group">
        <label for="name">Name:</label>
  <input type="text" class="form-control" id="name" placeholder="Enter name" name=t1 required>
      </div>
      <div class="form-group">
        <label for="number">Phone no:</label>
  <input type="Number" class="form-control" id="Phone" placeholder="Enter phone no" name=t2 required>
      </div>
   
    
    <div class="form-group">
      <label for="email">Email:</label>
<input type="email" class="form-control" id="email" placeholder="Enter email" name=t3 required>
    </div>
    <div class="form-group">
      <label for="pwd">Password:</label>
      <input type="password" class="form-control" id="pwd" placeholder="Enter password" name=t4 required>
    </div>
    <div class="checkbox">
      <label><input type="checkbox"> Remember me</label>
    </div>
<button type="submit" class="btn btn-default">Submit</button> 
  </form></div></body></html>
--------------------------------------------------------------------------------------------------------------
Example-2
----------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-bootroutexample',
  templateUrl: './bootroutexample.component.html',
  styleUrls: ['./bootroutexample.component.css']
})
export class BootroutexampleComponent {
}

--------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
  <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
</head>
<header>
    
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <link rel="stylesheet" href="https://www.w3schools.com/lib/w3-theme-black.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <body id="myPage">
<div class="w3-top">
 <div class="w3-bar w3-theme-d2 w3-left-align">
  <a class="w3-bar-item w3-button w3-hide-medium w3-hide-large w3-right w3-hover-white w3-theme-d2" href="javascript:void(0);" onclick="openNav()"><i class="fa fa-bars"></i></a>
  <a class="w3-bar-item w3-button w3-coral"><i class="fa fa-home w3-margin-right"></i>Wipro Batch-37</a>
  <a routerLink="home" class="w3-bar-item w3-button w3-hide-small w3-hover-white">Home</a>
  <div class="w3-dropdown-hover w3-hide-small">
    <button class="w3-button" title="Notifications">Registration <i class="fa fa-caret-down"></i></button>     
    <div class="w3-dropdown-content w3-card-4 w3-bar-block">
      <a routerLink="/addemployee" class="w3-bar-item w3-button">EmployeeRegistration</a>
      <a routerLink="/addcustomer"class="w3-bar-item w3-button">CustomerRegistration</a>
    </div>
    </div>
  <a [routerLink]="['/Contact']" class="w3-bar-item w3-button w3-hide-small w3-hover-white">Contact</a>
  <a [routerLink]="['/Registration']" class="w3-bar-item w3-button w3-hide-small w3-hover-white">Register</a>
  </div>
<router-outlet></router-outlet>
</div>
</body>
</header>
-----------------------------------------------------------------------------------------------------------------------------
---------------Angular Assignment-1------------------------------------------
create an application using angular
COID-19 Hospital
registration
doctor time table
book a bed
book a doctor
book a ambulance
give feedBack
----------------------------------------------------------------
1. ifdemo.component.ts
----------------------------------------------------------------------------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-ifdemo',
  templateUrl: './ifdemo.component.html',
  styleUrls: ['./ifdemo.component.css']
})
export class IfdemoComponent {
   public product = {
     Name: 'Nike Casuals',
     Price: 4500.55,
     Photo: 'assets/shoe.jpg'
   };
   public showImage = false;   <!-- initial state-->
   public btnText = 'Show';

   public TogglePreview() 
{
      this.showImage = (this.showImage==false)?true:false;
      this.btnText = (this.btnText=='Show')?'Hide':'Show';
   }
}
--------------------------------------------------------------------------------------------------------------------

2. ifdemo.component.html

<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
  <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
</head>
<body>
<div class="container">

<div class="container-fluid">
    <h2>Product Details</h2>
    <div class="row">
      <div class="col-3">
          <dl>
              <dt>Name</dt>
              <dd>{{product.Name}}</dd>
              <dt>Price</dt>
              <dd>{{product.Price}}</dd>
          </dl>
          <button (click)="TogglePreview()" class="btn btn-primary btn-sm btn-block">{{btnText}} Preview</button>
      </div>
      <div class="col-9">
        <div *ngIf="showImage">
            <img [src]="product.Photo" height="200" width="200" >
        </div>
      </div>
    </div>
    </div>
    </div>
-----------------------------------------------------------------------------------------------------------------------
example-3
-----------------------

Likesdemo.component.ts
-------------------------------------------------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-like-demo',
  templateUrl: './like-demo.component.html',
  })
export class LikeDemoComponent {

  public products =
 [
    {Name: 'JBL Speaker', Photo: 'assets/jblspeaker.webp', Likes: 0, Dislikes: 0},
    {Name: 'Nike Casuals', Photo: 'assets/shoe.jpg', Likes: 0, Dislikes: 0},
    {Name: 'Shirt', Photo: 'assets/shirt.jpeg', Likes: 0, Dislikes: 0}
  ];
  public LikesCounter(item:any){
      item.Likes++;
  }
  public DislikesCounter(item:any){
       item.Dislikes++;
  }
}

-----------------------------------------------------------------------------------
	Likesdemo.component.html
--------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
  <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
</head>
<body>
<div class="container">
<div class="container-fluid">
 <h2>Products Catalog</h2>
 <div class="card-deck">
    <div class="card" *ngFor="let item of products">
        <div class="card-header">
            <h3>{{item.Name}}</h3>
        </div>
        <div class="card-body">
            <img width="200" height="200" [src]="item.Photo" >
        </div>
        <div class="card-footer">
           <div class="btn-group">
            <button (click)="LikesCounter(item)" class="btn btn-success">[{{item.Likes}}]<span class="fa fa-thumbs-up"></span> Like(s)</button>
            <button (click)="DislikesCounter(item)" class="btn btn-danger">[{{item.Dislikes}}]<span class="fa fa-thumbs-down">Dislike(s)</span></button>
           </div>
        </div>
    </div>
</div>
</div>
</div>
------------------------------------------------------------------------
Angular Pipe
---------------------------
1)Pipe is used to transform data.
2)Data may come to angular from various source so the data type of source provider and datatype of the typescript will not match.so it will not display in proper format .so pipe will transform the data and display in desired format.
3)pipes are used for formatting and filtering the data.
4)All pipes are derived from 'PipeTransform' .
5)import {PipeTransform} from '@angular/core'
6)we have some pre-defined pipes and we can also create custom pipes.
7)Every pipe is defined with a pipe name,which is configured using "@Pipe()".
@Pipe({name:"uppercase"})
8)Every pipe implements  "PipeTransform" and use the transform() method.
export class Uppercase implements PipeTransform
{
transform(value)
{ return value;}}
-----------------------------------------------------------------
example :1
----------------------
app.component.ts file.
-------------------------------------------
import { Component } from '@angular/core';
@Component ({ 
   selector: 'my-app', 
   templateUrl: 'app/app.component.html' 
}) 
export class AppComponent { 
   TutorialName: string = 'Angular JS'; 
   appList: string[] = ["Binding", "Display", "Services"]; 
} 
-----------------------------------------------------------------------
app.component.html file.
-------------------------------------------------------------------------
<div> 
   The name of this Tutorial is {{TutorialName}}<br>  
   The first Topic is {{appList[0] | uppercase }}<br> 
   The second Topic is {{appList[1] | uppercase }}<br> 
   The third Topic is {{appList[2]| uppercase }}<br> 
</div>

----------------------------------------------------------------------------------------
Example :-
Pre-defined Pipes
-----------------------------------
import { Component } from '@angular/core';
@Component({
  selector: 'app-pipeexample1',
  templateUrl: './pipeexample1.component.html',
  styleUrls: ['./pipeexample1.component.css']
})
export class Pipeexample1Component  
{
  TutorialName: string = 'Angular JS'; 
  appList: string[] = ["Binding data", "Display device", "Services oriented"]; 
public product = {
  Name:'Samsung TV',
  Price:45000.50,
  Mfd:new Date('2021-02-02')
}}
---------------------------------------------------------------------------------------------
<div> 
    The name of this Tutorial is {{TutorialName}}<br>  
    The first Topic is {{appList[0] | titlecase }}<br> 
    The second Topic is {{appList[1] | titlecase }}<br> 
    The third Topic is {{appList[2]| titlecase }}<br> 
    The product name is {{product.Name | titlecase}}<br>
    The product price is {{product.Price}}<br>
    The product price is {{product.Price|number}}<br>
    The product price is {{product.Price|currency}}<br>
    The product price is {{product.Price|currency:'INR'}}<br>
    The product price is {{product.Price|currency:'&#8377;'}}<br>
    The product date is {{product.Mfd|date:'MMM-dd-yyyy'}}<br>
    The product date is {{product.Mfd|date:'shortDate'}}<br>
    The product Date is {{product|json}}<br/>    
    The Canadian dollar {{1234567 | currency:'CAD':'symbol' :'1.2-5'}}<br>
    The first Topic is {{appList[0] | slice:1:2}}<br> 
    The second Topic is {{appList[1] | slice:1:3}}<br> 
   The third Topic is {{appList[2]| slice:2:3}}<br> 
    
 </div>

-----------------------------------------------------------------------------------------
custom pipes
-----------------------------------------------------------------------------------------
Angular  also has the facility to create custom pipes. The general way to define a custom pipe is as follows.
syntax:-
----------------
import { Pipe, PipeTransform } from '@angular/core';  
@Pipe({name: 'Pipename'}) 

export class Pipeclass implements PipeTransform 
{ 
   transform(parameters): returntype 
{ } 
} 
--------------------------------------------------------------------------------------
Where,

'Pipename' - This is the name of the pipe.

Pipeclass - This is name of the class assigned to the custom pipe.

Transform - This is the function to work with the pipe.

Parameters - This are the parameters which are passed to the pipe.

Returntype - This is the return type of the pipe.
----------------------------------------------------------------------------------
step-1)create folder multiplier
step-2)
--------------------------------------------------------------
multiplier.component.ts
---------------------------------------------------------------------
import {Component} from '@angular/core';
@Component ({
  selector: 'app-multiplier',
  template:`
  <p>Multiplier {{5 | Multiplier: 20}}</p> <br />
  
  <p>Multiplier {{2 | Multiplier: 20}}</p> <br />
  
  <p>Multiplier {{4 | Multiplier: 20}}</p> <br />
   `
})
export class MultiplierComponent
{}
-----------------------------------------------------------------------------------
step 3) create a file inside multiplier folder
-----------------------------------------------------------
multiplier.pipe.ts (new pipe is defined) //this custom pipe have to be separate
--------------------------------------------------------------
import {Pipe,PipeTransform} from '@angular/core';

@Pipe({name: 'Multiplier'})

export class Multiplierpipe implements PipeTransform
{
    transform(value:number, multiply: number):number
    {
        return multiply * value
    }
}

--------------------------------------------------------------------------------------













